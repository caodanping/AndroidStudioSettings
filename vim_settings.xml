<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/List.js" timestamp="1471418038574">
        <mark key="[" line="76" column="16" />
        <mark key="]" line="76" column="16" />
        <mark key="." line="76" column="16" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/scripts/LocalSearchControl.js" timestamp="1471418563775">
        <mark key="'" line="1860" column="17" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/store/WarehouseManagers.js" timestamp="1471317491328">
        <mark key="[" line="7" column="16" />
        <mark key="]" line="8" column="18" />
        <mark key="." line="8" column="18" />
        <mark key="^" line="8" column="18" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/ext/src/window/MessageBox.js" timestamp="1471333619770">
        <mark key="'" line="977" column="51" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/NavTree.js" timestamp="1471418403334" />
      <file name="D:/IdeaProjects/lems/src/main/frontend/ext/src/ux/ajax/Simlet.js" timestamp="1471246271335">
        <mark key="'" line="190" column="32" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" timestamp="1471331863377">
        <mark key="'" line="104" column="12" />
        <mark key="[" line="49" column="39" />
        <mark key="]" line="33" column="5" />
        <mark key="." line="33" column="5" />
        <mark key="^" line="33" column="5" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/java/com/aucdi/csfy/domain/Location.java" timestamp="1471230198560">
        <mark key="[" line="36" column="43" />
        <mark key="]" line="57" column="1" />
        <mark key="^" line="57" column="1" />
        <mark key="." line="57" column="1" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/scripts/SearchControl.js" timestamp="1471416557036">
        <mark key="'" line="1752" column="17" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2062" column="4" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/BMapPanel.js" timestamp="1471061441002">
        <mark key="[" line="68" column="31" />
        <mark key="]" line="68" column="3" />
        <mark key="^" line="68" column="3" />
        <mark key="." line="68" column="3" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Manager.js" timestamp="1471417985638">
        <mark key="'" line="110" column="20" />
        <mark key="[" line="99" column="0" />
        <mark key="]" line="99" column="32" />
        <mark key="^" line="99" column="32" />
        <mark key="." line="99" column="32" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/java/com/aucdi/csfy/web/WarehouseController.java" timestamp="1471402214763">
        <mark key="[" line="6" column="34" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/BMap.js" timestamp="1471400993506">
        <mark key="'" line="76" column="21" />
        <mark key="[" line="173" column="12" />
        <mark key="]" line="173" column="12" />
        <mark key="." line="173" column="12" />
        <mark key="^" line="176" column="31" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/SimData.js" timestamp="1471399908409">
        <mark key="[" line="104" column="45" />
        <mark key="]" line="105" column="45" />
        <mark key="." line="105" column="45" />
        <mark key="^" line="105" column="45" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/java/com/aucdi/csfy/domain/Site.java" timestamp="1471243110652">
        <mark key="[" line="21" column="7" />
        <mark key="]" line="34" column="11" />
        <mark key="." line="34" column="11" />
        <mark key="^" line="34" column="11" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/bmap/DemoController.js" timestamp="1470198797831">
        <mark key="[" line="3" column="33" />
        <mark key="]" line="6" column="11" />
        <mark key="^" line="6" column="11" />
        <mark key="." line="6" column="11" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/bmap/Demo.js" timestamp="1470988096977">
        <mark key="[" line="176" column="0" />
        <mark key="]" line="176" column="0" />
        <mark key="^" line="15" column="3" />
        <mark key="." line="176" column="0" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/java/com/aucdi/csfy/common/CollectionUtils.java" timestamp="1467794992879">
        <mark key="[" line="15" column="1" />
        <mark key="]" line="15" column="0" />
        <mark key="^" line="15" column="0" />
        <mark key="." line="15" column="3" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/EditController.js" timestamp="1471318507246">
        <mark key="[" line="6" column="6" />
        <mark key="]" line="10" column="18" />
        <mark key="." line="10" column="18" />
        <mark key="^" line="10" column="18" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" timestamp="1471265379528">
        <mark key="'" line="1637" column="24" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app.json" timestamp="1470204087407">
        <mark key="[" line="110" column="21" />
        <mark key="]" line="110" column="38" />
        <mark key="." line="110" column="38" />
        <mark key="^" line="110" column="38" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/ManagerController.js" timestamp="1471337057183">
        <mark key="[" line="26" column="25" />
        <mark key="]" line="26" column="27" />
        <mark key="." line="26" column="27" />
        <mark key="^" line="26" column="27" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/model/Warehouse.js" timestamp="1471317109741">
        <mark key="[" line="10" column="39" />
        <mark key="]" line="11" column="44" />
        <mark key="." line="11" column="44" />
        <mark key="^" line="11" column="44" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/store/Warehouses" timestamp="1470987963636">
        <mark key="[" line="6" column="33" />
        <mark key="]" line="6" column="33" />
        <mark key="." line="6" column="33" />
        <mark key="^" line="6" column="33" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/frontend/app/view/bmap/LocalSearchField.js" timestamp="1471418373502">
        <mark key="[" line="42" column="16" />
        <mark key="]" line="52" column="22" />
        <mark key="^" line="52" column="22" />
        <mark key="." line="52" column="22" />
      </file>
      <file name="D:/IdeaProjects/lems/src/main/java/com/aucdi/csfy/web/DepartmentController.java" timestamp="1471402189162">
        <mark key="[" line="18" column="0" />
        <mark key="]" line="19" column="39" />
      </file>
    </filemarks>
    <jumps>
      <jump line="21" column="8" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Manager.js" />
      <jump line="30" column="0" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Manager.js" />
      <jump line="32" column="33" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" />
      <jump line="39" column="33" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" />
      <jump line="59" column="31" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" />
      <jump line="125" column="8" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/ux/ajax/Simlet.js" />
      <jump line="190" column="32" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/ux/ajax/Simlet.js" />
      <jump line="97" column="0" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="325" column="63" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="326" column="56" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="386" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="392" column="21" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="395" column="8" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="398" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="399" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="422" column="89" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="427" column="17" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="429" column="15" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="538" column="42" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="576" column="25" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="580" column="32" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1039" column="28" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1043" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1044" column="31" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1052" column="31" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1053" column="23" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1066" column="15" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1068" column="16" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1070" column="16" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1076" column="16" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1079" column="15" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1080" column="17" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1081" column="29" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1086" column="19" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1087" column="36" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1090" column="20" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1137" column="26" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1240" column="133" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1266" column="15" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1271" column="6" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1348" column="8" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1353" column="28" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1478" column="24" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1482" column="68" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1485" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1486" column="88" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1487" column="23" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1489" column="31" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1490" column="75" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1491" column="19" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1495" column="31" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1499" column="19" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1503" column="46" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1522" column="23" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1525" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1526" column="15" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1528" column="19" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1533" column="27" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1536" column="21" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1552" column="94" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1555" column="47" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1557" column="24" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1558" column="25" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1562" column="73" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1568" column="84" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1571" column="26" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1573" column="26" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1577" column="26" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1578" column="50" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1579" column="22" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1580" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1589" column="46" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1594" column="35" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1602" column="78" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1604" column="58" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1606" column="29" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1614" column="40" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="147" column="29" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="53" column="28" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="52" column="30" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="33" column="26" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1662" column="30" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="1637" column="24" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/panel/Table.js" />
      <jump line="49" column="20" filename="D:/IdeaProjects/lems/src/main/frontend/app/SimData.js" />
      <jump line="177" column="0" filename="D:/IdeaProjects/lems/src/main/frontend/app/SimData.js" />
      <jump line="0" column="0" filename="D:/IdeaProjects/lems/src/main/frontend/app/SimData.js" />
      <jump line="2" column="4" filename="D:/IdeaProjects/lems/src/main/frontend/app/SimData.js" />
      <jump line="94" column="9" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" />
      <jump line="95" column="9" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" />
      <jump line="96" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Edit.js" />
      <jump line="84" column="16" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/ManagerController.js" />
      <jump line="977" column="51" filename="D:/IdeaProjects/lems/src/main/frontend/ext/src/window/MessageBox.js" />
      <jump line="174" column="12" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/BMap.js" />
      <jump line="76" column="21" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/BMap.js" />
      <jump line="1552" column="0" filename="D:/IdeaProjects/lems/src/main/frontend/scripts/SearchControl.js" />
      <jump line="1813" column="21" filename="D:/IdeaProjects/lems/src/main/frontend/scripts/SearchControl.js" />
      <jump line="1752" column="17" filename="D:/IdeaProjects/lems/src/main/frontend/scripts/SearchControl.js" />
      <jump line="103" column="20" filename="D:/IdeaProjects/lems/src/main/frontend/app/view/warehouse/Manager.js" />
      <jump line="1815" column="38" filename="D:/IdeaProjects/lems/src/main/frontend/scripts/LocalSearchControl.js" />
      <jump line="1860" column="17" filename="D:/IdeaProjects/lems/src/main/frontend/scripts/LocalSearchControl.js" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text>tbar</text>
      </register>
      <register name="-" type="4">
        <text>tbar</text>
      </register>
      <register name="/" type="4">
        <text>localSearch</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="4">
        <text>tbar</text>
      </register>
      <register name="2" type="4">
        <text>,</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIH0K</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIH0K</text>
      </register>
      <register name="6" type="4">
        <text>bar</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="9" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>localSearch</last-search>
      <last-offset />
      <last-pattern>localSearch</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>nav</entry>
        <entry>navi</entry>
        <entry>bind</entry>
        <entry>_bind</entry>
        <entry>autocomplete</entry>
        <entry>autoComp</entry>
        <entry>localsearch</entry>
        <entry>if</entry>
        <entry>icon</entry>
        <entry>onMarkBtn</entry>
        <entry encoding="base64">XDx9XD4=</entry>
        <entry>ware</entry>
        <entry>depart</entry>
        <entry>doPost</entry>
        <entry>openRequest</entry>
        <entry>store</entry>
        <entry>this</entry>
        <entry>show</entry>
        <entry>searchAC</entry>
        <entry>localSearch</entry>
      </history-search>
      <history-cmd>
        <entry>wa</entry>
        <entry>wq</entry>
        <entry>W</entry>
        <entry encoding="base64">JzwsJz5tIDI=</entry>
        <entry encoding="base64">JzwsJz5tIDkz</entry>
        <entry encoding="base64">JzwsJz5tIDky</entry>
        <entry encoding="base64">JzwsJz5tIDk2</entry>
        <entry encoding="base64">JzwsJz50IDk1</entry>
        <entry encoding="base64">JzwsJz50IDg4</entry>
        <entry encoding="base64">JzwsJz5tIDgz</entry>
        <entry encoding="base64">JzwsJz5q</entry>
        <entry>j</entry>
        <entry>1</entry>
        <entry>50</entry>
        <entry>t110</entry>
        <entry>m69</entry>
        <entry encoding="base64">JzwsJz5tNA==</entry>
        <entry encoding="base64">JzwsJz5tODI=</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>